[{"D:\\Clover_Dynamics\\clover_dynamics_task\\src\\index.js":"1","D:\\Clover_Dynamics\\clover_dynamics_task\\src\\reportWebVitals.js":"2","D:\\Clover_Dynamics\\clover_dynamics_task\\src\\App.js":"3","D:\\Clover_Dynamics\\clover_dynamics_task\\src\\Redux\\Redux.js":"4","D:\\Clover_Dynamics\\clover_dynamics_task\\src\\Redux\\RoverPhotos.js":"5"},{"size":705,"mtime":1612315891690,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":6722,"mtime":1612377822103,"results":"9","hashOfConfig":"7"},{"size":252,"mtime":1612314785352,"results":"10","hashOfConfig":"7"},{"size":462,"mtime":1612313696747,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"7wzn51",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Clover_Dynamics\\clover_dynamics_task\\src\\index.js",[],["24","25"],"D:\\Clover_Dynamics\\clover_dynamics_task\\src\\reportWebVitals.js",[],"D:\\Clover_Dynamics\\clover_dynamics_task\\src\\App.js",["26","27","28","29","30"],"import s from \"./App.module.scss\";\nimport Curiosity from \"./Img/curiosity.jpg\";\nimport Opportunity from \"./Img/Opportunity.jpg\";\nimport Spirit from \"./Img/Spirit.jpg\";\nimport Axios from \"axios\";\nimport { useState } from \"react\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\n\nfunction App(props) {\n  const [photos, setPhotos] = useState([]);\n  const [Length, setLength] = useState(5);\n  function chooseRover(e) {\n    let SelectedRover = document.getElementById(\"SelectedRover\");\n    let RoverImg = document.getElementById(\"RoverImg\");\n    let RoverName = document.getElementById(\"RoverName\");\n    let RoverBlock = document.getElementById(\"RoverBlock\");\n    let target = e.currentTarget;\n    let ParentArray = target.parentElement.children;\n    RoverImg.src = ParentArray[0].src;\n    RoverName.innerHTML = ParentArray[1].innerHTML;\n    RoverBlock.style.display = \"none\";\n    SelectedRover.style.display = \"grid\";\n  }\n  function change() {\n    setPhotos([]);\n    let load = document.getElementById(\"Load\");\n    let block = document.getElementById(\"PhotosBlock\");\n    load.style.display = \"none\";\n    block.style.display = \"none\";\n  }\n  function roverReturn() {\n    let load = document.getElementById(\"Load\");\n    let camera = document.getElementById(\"camera\");\n    let sol = document.getElementById(\"solInput\");\n    let SelectedRover = document.getElementById(\"SelectedRover\");\n    let RoverBlock = document.getElementById(\"RoverBlock\");\n    let block = document.getElementById(\"PhotosBlock\");\n    let photoError = document.getElementById(\"Error\");\n    camera.value = \"None\";\n    sol.value = \"\";\n    load.style.display = \"none\";\n    block.style.display = \"none\";\n    photoError.style.display = \"none\";\n    SelectedRover.style.display = \"none\";\n    RoverBlock.style.display = \"grid\";\n    setPhotos([]);\n  }\n  function loadMore() {\n    setLength(Length + 5);\n    console.log(Length);\n    if (Length + 5 > photos.length) {\n      let load = document.getElementById(\"Load\");\n      load.style.display = \"none\";\n    }\n  }\n  function SendRequest() {\n    let block = document.getElementById(\"PhotosBlock\");\n    let photoError = document.getElementById(\"Error\");\n    let name = document.getElementById(\"RoverName\");\n    let camera = document.getElementById(\"camera\");\n    let sol = document.getElementById(\"solInput\");\n    let load = document.getElementById(\"Load\");\n    Axios.get(\n      `https://api.nasa.gov/mars-photos/api/v1/rovers/${\n        name.innerHTML\n      }/photos?sol=${Number.parseInt(sol.value)}&camera=${\n        camera.value\n      }&api_key=rHOBuDjqX5lc2JJc2TDc2nJBc2hZbT08qNXlb0Gv`\n    ).then((Response) => {\n      setPhotos(Response.data.photos);\n      if (Response.data.photos.length > 5) {\n        load.style.display = \"grid\";\n      }\n      if (Response.data.photos.length > 0) {\n        photoError.style.display = \"none\";\n        block.style.display = \"inline\";\n      } else {\n        block.style.display = \"none\";\n        photoError.style.display = \"inline\";\n      }\n    });\n  }\n  let newArray = photos.slice(0, Length);\n  let Photos = newArray.map((p) => {\n    return (\n      <div key={p.id}>\n        <img className={s.Photo} src={p.img_src} />\n      </div>\n    );\n  });\n  return (\n    <div className={s.App}>\n      <div className={s.MarsTheme}></div>\n      <div className={s.RoverBlock} id=\"RoverBlock\">\n        <div className={s.Rover1}>\n          <img className={s.RoverBlockImg} src={Curiosity} />\n          <div className={s.RoverBlockName}>Curiosity</div>\n          <button className={s.RoverBlockButton} onClick={chooseRover}>\n            Select\n          </button>\n        </div>\n        <div className={s.Rover2}>\n          <img className={s.RoverBlockImg} src={Opportunity} />\n          <div className={s.RoverBlockName}>Opportunity</div>\n          <button className={s.RoverBlockButton} onClick={chooseRover}>\n            Select\n          </button>\n        </div>\n        <div className={s.Rover3}>\n          <img className={s.RoverBlockImg} src={Spirit} />\n          <div className={s.RoverBlockName}>Spirit</div>\n\n          <button className={s.RoverBlockButton} onClick={chooseRover}>\n            Select\n          </button>\n        </div>\n      </div>\n\n      <div className={s.SelectedRover} id=\"SelectedRover\">\n        <div className={s.Rover}>\n          <img className={s.RoverImg} src=\"\" id=\"RoverImg\" />\n          <div className={s.RoverInfo}>\n            <div className={s.RoverName} id=\"RoverName\">\n              {\" \"}\n            </div>\n            <div className={s.RoverProperty}>\n              <div className={s.RoverCameras}>\n                <div className={s.CameraTitle}>Choose a camera</div>\n                <select className={s.Camera} id=\"camera\" onChange={change}>\n                  <option>None</option>\n                  <option>FHAZ</option>\n                  <option>RHAZ</option>\n                  <option>MAST</option>\n                  <option>CHEMCAM</option>\n                  <option>MAHLI</option>\n                  <option>MARDI</option>\n                  <option>NAVCAM</option>\n                  <option>PANCAM</option>\n                  <option>MINITES</option>\n                </select>\n              </div>\n              <div className={s.SolDay}>\n                <div className={s.SolDayTitle}>Input Sol Day</div>\n                <input\n                  className={s.SolDayInput}\n                  id=\"solInput\"\n                  onChange={change}\n                ></input>\n              </div>\n            </div>\n            <button className={s.ShowButton} onClick={SendRequest}>\n              Show\n            </button>\n          </div>\n          <div className={s.Arrow}>\n            <ArrowBackIcon\n              className={s.ArrowIcon}\n              onClick={roverReturn}\n            ></ArrowBackIcon>\n            <span className={s.ArrowTitle} onClick={roverReturn}>\n              Return to Rovers\n            </span>\n          </div>\n        </div>\n      </div>\n      <div className={s.ErrorContainer} id=\"Error\">\n        <div className={s.Error}>\n          <div className={s.ErrorTitle}>\n            Data on your request does not exist (possibly the wrong sol or rover\n            does not have this type of camera)\n          </div>\n        </div>\n      </div>\n      <div className={s.PhotosContainer} id=\"PhotosBlock\">\n        <div className={s.PhotosBlock}>\n          <div className={s.Photos}>\n            <div className={s.PhotoBlockTitle}>The surface of Mars </div>\n            <div> {Photos}</div>\n          </div>\n        </div>\n      </div>\n      <div className={s.LoadBlock} id=\"Load\">\n        <button className={s.Load} onClick={loadMore}>\n          Load more\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Clover_Dynamics\\clover_dynamics_task\\src\\Redux\\Redux.js",[],"D:\\Clover_Dynamics\\clover_dynamics_task\\src\\Redux\\RoverPhotos.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":87,"column":9,"nodeType":"37","endLine":87,"endColumn":52},{"ruleId":"35","severity":1,"message":"36","line":96,"column":11,"nodeType":"37","endLine":96,"endColumn":62},{"ruleId":"35","severity":1,"message":"36","line":103,"column":11,"nodeType":"37","endLine":103,"endColumn":64},{"ruleId":"35","severity":1,"message":"36","line":110,"column":11,"nodeType":"37","endLine":110,"endColumn":59},{"ruleId":"35","severity":1,"message":"36","line":121,"column":11,"nodeType":"37","endLine":121,"endColumn":62},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]